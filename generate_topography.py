import numpy as np
from scipy.ndimage import gaussian_filter
import numpy as np
import matplotlib.pyplot as plt

# Write sra files in plasim style
def write_sra(filename, array, var_id, date="20070101", time=0):
    nlat, nlon = array.shape
    with open(filename, "w") as f:
        # Header line
        f.write(f"{var_id:10d}{0:10d}{int(date):10d}{time:10d}{nlon:10d}{nlat:10d}{0:10d}{0:10d}\n")
        # Data block: 8 values per line to match plasim
        for row in array:
            for i in range(0, nlon, 8):
                chunk = row[i:i+8]
                f.write("".join(f"{val:11.3f}" for val in chunk) + "\n")

# Synthetic topography generator from noise
# 0 for ocean, positive for everything else
# (plasim doesn't seem to contain land valleys in modeling, which is a weakness)
def make_topography(nlat=32, nlon=64, seed=None, smoothing=3, ocean_fraction=0.3, max_height=5000.0):
    if seed is not None:
        rng = np.random.default_rng(seed)
    else:
        rng = np.random.default_rng()
    raw_noise = rng.normal(size=(nlat, nlon))
    
    # Smooth for large-scale continent moeling
    smooth_noise = gaussian_filter(raw_noise, sigma=smoothing)
    
    # Shift to non-negative and rescale to max_height
    # This avoids valleys
    smooth_noise -= smooth_noise.min()
    topo = max_height * smooth_noise / smooth_noise.max()
    
    # Flatten lowest cells to represent oceans
    n_ocean = int(nlat * nlon * ocean_fraction)
    flat_indices = np.argsort(topo.ravel())[:n_ocean]
    topo.ravel()[flat_indices] = 0.0
    
    return topo

# Generate a fractional landmass randomly, based on the topography
# map generated by the abvoe function
def make_fractional_landmask(topo, upsample=8, smoothing=2):
    nlat, nlon = topo.shape
    frac_mask = np.zeros_like(topo, dtype=float)
    
    # Generate raw fractional land
    for i in range(nlat):
        for j in range(nlon):
            if topo[i,j] <= 0:
                frac_mask[i,j] = 0.0
            else:
                # subgrid variation for partial land
                fine_noise = topo[i,j] * 0.5 * np.random.rand(upsample, upsample)
                land_pixels = (fine_noise > 0).sum()
                frac_mask[i,j] = land_pixels / (upsample*upsample)
    
    # Save ocean mask as the zeroes, before smoothing process
    ocean_mask = (topo <= 0)
    
    # Smooth only land cells
    frac_mask_land = gaussian_filter(frac_mask, sigma=smoothing)
    
    # Restore zeros for oceans and assign smoothed land to land cells
    frac_mask[ocean_mask] = 0.0
    frac_mask[~ocean_mask] = frac_mask_land[~ocean_mask]
    
    # Clip to [0,1] range like plasim
    frac_mask = np.clip(frac_mask, 0.0, 1.0)
    
    return frac_mask

nlat, nlon = 32, 64
topography = make_topography(nlat, nlon, smoothing=3, ocean_fraction=0.7, max_height=5000.0)
frac_land = make_fractional_landmask(topography, upsample=8, smoothing=2)

# Write PlaSim-compatible SRA files
write_sra("topomap.sra", topography, var_id=129)
write_sra("landmap.sra", frac_land, var_id=172)

# Read in an SRA file
def read_sra(filename):
    with open(filename, 'r') as f:
        lines = f.readlines()
    
    # Skip header
    data_lines = lines[1:]
    
    # Flatten all numbers and reshape
    data = []
    for line in data_lines:
        nums = [float(x) for x in line.split()]
        data.extend(nums)
    
    nlat = int(lines[0].split()[5])
    nlon = int(lines[0].split()[4])
    array = np.array(data[:nlat*nlon]).reshape((nlat, nlon))
    
    return array

# Load files
topo = read_sra("topomap.sra")
frac_land = read_sra("landmap.sra")

nlat, nlon = topo.shape
img = np.zeros((nlat, nlon, 3))

# Ocean cells -> blue
ocean_mask = (frac_land == 0)
img[ocean_mask] = [0.2, 0.4, 0.8]

# Land cells between black and brown with topo
land_mask = ~ocean_mask
norm_topo = topo[land_mask] / topo[land_mask].max()

green = np.array([0.6, 0.9, 0.6])
brown = np.array([0.35, 0.15, 0.05])
img[land_mask] = np.outer(1-norm_topo, green) + np.outer(norm_topo, brown)

# Assign per-pixel coloring
for i in range(3):
    img[:,:,i][land_mask] = green[i]*(1-norm_topo) + brown[i]*norm_topo

plt.figure(figsize=(10,5))
plt.imshow(img, origin='lower', aspect='auto')
plt.title("Planet Map: Blue=Ocean, Green-Brown=Low-High Altitude")
plt.axis('off')
plt.show()
